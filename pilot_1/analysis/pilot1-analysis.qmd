---
title: "Pilot data"
format: html
editor: visual
---

# Getting set up

## Packages

```{r}
#| label: Data Fetching. Load R packages
#| include: false 

library(osfr)
library(ez)
library(tidyverse)
library(gt)
library(gtsummary)
library(kableExtra)
library(stringr)
# library(knitr)
# library(corrplot)
# library(GGally)
# library(car)
# library(MASS)
# library(glmnet)

```

# Prolific demographics data wrangling

```{r}
## add which round of the pilot it was by reading in demographics files so we know completion dates
#read in prolific demographics files 
demo1 <- read_csv("prolific_export_6697dedd0a9f0e1820436c12.csv")  %>%
  mutate(Age = as.numeric(Age))
demo2 <- read_csv("prolific_export_6699817273833cff743f502e.csv") %>%
  select(-'U.s. political affiliation') %>%
  mutate(Age = as.numeric(Age))
demo3 <- read_csv("prolific_export_6690246c6dba4b8beab3c615.csv") %>%
  mutate(Age = as.numeric(Age))
demo4 <- read_csv("prolific_export_66a7f5efd46ad7a2b78cc200.csv") %>%
  mutate(Age = as.numeric(Age))

# compile prolific demographics files into one df, filter out people who returned the experiment, and convert time into minutes for readability 
full_prolific_demographics_df <- bind_rows(demo1, demo2, demo3, demo4) 
full_prolific_demographics_df <- full_prolific_demographics_df %>%
rename("prolific_subject_id" = "Participant id") %>%
filter(Status != "RETURNED") %>%
mutate(`Time taken (minutes)` = as.numeric(`Time taken`) / 60) %>%
select(- "Time taken")
```

# OSF

```{r}
#| label: Retrieve data from our OSF project. Loading into a data folder, which  we manually create
#| include: false 

##FIGURE OUT WHY IT SKIPS THESE FILES: 6qj7ucdh3r, wdszcmx4mg, anh8hw26sz, 79eufl1zzr

osf_retrieve_node("x32pv") %>%
   osf_ls_files(
     n_max = 10000000
   ) %>%
   osf_download(path = "data", conflicts = "skip")

```

```{r}
#| label: Bind csv's together so we have one big data frame to work with.
#| include: false 

osf_csv_filenames <- list.files(path = "data/")
raw_dfs_tibbles <- map(osf_csv_filenames, ~read_csv(file.path("data/", .)))
raw_df <- bind_rows(raw_dfs_tibbles)

```

```{r}
#| label: Merge prolific demographics and create a condition type column in the raw_df
#| include: false 

#add condition column. use fill so that every row associated with a subject has their condition entered
raw_df <- raw_df %>%
  left_join(full_prolific_demographics_df, by = "prolific_subject_id") %>%
  mutate(condition = case_when(
    grepl("identify a specific group of people", logs) ~ "viewpoint bot",
    grepl("ask a question", logs) ~ "question bot",
    grepl("respond to the other person's argument with a counterargument", logs) ~ "counter bot",
    grepl('These response options are numbered as (0), (1), and (2) in "role":"content-choices"/chatbot-answers".', logs) ~ "selection bot",
    TRUE ~ NA_character_
  )) %>%
  mutate(condition = case_when(
    grepl("Task 2: Very briefly summarize the arguments", logs) ~ "combination bot",
    phase == "control-intervention" ~ "control free reflection",
    TRUE ~ condition
  )) %>%
  group_by(prolific_subject_id) %>%
  fill(condition, .direction = "downup") 

```

# Survey data frame

```{r}
#| label: Create a data frame that is just for surveys and clean it up a bit
#| include: false

surveys_cleaning_df <- raw_df %>%
  # Remove the first four subjects of the pilot who participant in the experiment before we made the code easier to perform data analysis on 
  filter(prolific_subject_id != "5ff3b5986d65c5a24eebd036") %>%
  filter(prolific_subject_id != "663ceae2f9337d71cfe99679") %>%
  filter(prolific_subject_id != "6550dd527fede9c068b3a08b") %>% 
  filter(prolific_subject_id != "665b86a9372cfba059fbc8e9") %>%
  # Remove a column that we don't care about for surveys
  select(- internal_node_id) %>%
  # Filter for only surveys
  filter(trial_type == "survey") %>%
  # Remove control interventions (these are technically surveys)
  filter(phase != "control-intervention") %>%
  # Remove the matrix question titles because they mess with separating questions from answers 
  mutate(across(everything(), ~ gsub('"rating-republicans":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-democrats":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-republicans":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-democrats":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-polarization-general":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization-general":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization-general":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization-general":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization-general":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization-general":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-offending-reason":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-euthanasia-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-gender-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-healthcare-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-bombing-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-vaccines-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-criminal-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-same-sex-openmindedness":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-openmindedness-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-openmindedness-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-openmindedness-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-openmindedness-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-openmindedness-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-openmindedness-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-openmindedness-post":null,', '', .))) %>% 
  mutate(across(everything(), ~ gsub('"euthanasia-reason-of-avoidance":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-reason-of-avoidance":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-reason-of-avoidance":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-reason-of-avoidance":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-reason-of-avoidance":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-reason-of-avoidance":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-reason-of-avoidance":null,', '', .))) %>%
 mutate(across(everything(), ~ gsub('"euthanasia-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-polarization-general-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization-general-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization-general-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization-general-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization-general-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization-general-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization-general-post-":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-republicans-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-democrats-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-republicans-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-democrats-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-reason-of-avoidance-post":null,', '', .))) %>%
  mutate(across(everything(), ~ gsub(',null,', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-republicans":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-democrats":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-republicans":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-democrats":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization-general":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-offending-reason":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-euthanasia-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-gender-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-healthcare-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-bombing-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-vaccines-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-criminal-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"pre-same-sex-openmindedness":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-openmindedness-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-reason-of-avoidance":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-reason-of-avoidance":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-reason-of-avoidance":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-reason-of-avoidance":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-reason-of-avoidance":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-reason-of-avoidance":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-reason-of-avoidance":', '', .))) %>% 
  mutate(across(everything(), ~ gsub('"euthanasia-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-polarization-general-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-polarization-general-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-polarization-general-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-polarization-general-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-polarization-general-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-polarization-general-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-polarization-general-post-":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-republicans-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"rating-democrats-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-republicans-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"interacting-with-democrats-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"euthanasia-reason-of-avoidance-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"gender-reason-of-avoidance-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"healthcare-reason-of-avoidance-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"bombing-reason-of-avoidance-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"vaccines-reason-of-avoidance-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"criminal-reason-of-avoidance-post":', '', .))) %>%
  mutate(across(everything(), ~ gsub('"same-sex-reason-of-avoidance-post":', '', .)))

  #Add a comma before the euthanasia-slider1 question because there isn't one for some reason and it messes up the rest of the code
  surveys_cleaning_df$response <- gsub("\\}\"euthanasia", "\\},\"euthanasia", surveys_cleaning_df$response)
  
surveys_df <- surveys_cleaning_df %>%
  # Remove weird characters but don't remove quotations because we need them for separating questions
  mutate(across(everything(), ~ gsub('}', '', .))) %>%
  mutate(across(everything(), ~ gsub('\\{', '', .))) %>%
  mutate(across(everything(), ~ gsub('\\[', '', .))) %>%
  mutate(across(everything(), ~ gsub('\\]', '', .))) %>%
  # Make each question its own row
  separate_rows(response, sep = ',"') %>%
  # Remove any leftover quotation marks
  mutate(across(everything(), ~ gsub('"', '', .))) %>%
  # Move answers to a new column
  separate(response, into = c("question", "answer"), sep = ":", extra = "merge", fill = "right") %>%
  # Remove all remaining questions that were answered with null (like the slider questions, because the slider 'placeholder' questions are where people actually answer the slider questions)
  filter(!is.na(answer) & answer != 'null' & answer != 'null,null') %>%
  # Remove the gender polarization line that we currently don't know how to code 
  filter(!grepl("Gender should be disregarded when selecting candidates for career advancement opportunities", question)) %>%
  # REMOVE THIS LINE WHEN ANALYZING THE FULL EXPERIMENT DATA; WE CHANGED THE EXPERIMENT HTML SO THIS LINE WON'T BE NECESSARY IN THE FUTURE. Recode a likert rating item that we forgot to change in the experiment html
  mutate(answer = ifelse(question == "willing-to-converse-likert-post",
                         recode(answer, 
                                "Item 1" = "-2", 
                                "Item 2" = "-1", 
                                "Item 3" = "0", 
                                "Item 4" = "1", 
                                "Item 5" = "2"),
                         answer)) 
```

## Analyze likert measures

```{r}
#| label: Manually look at ratings on opposite party to see if ppl contradicted themselves
#| echo: false

openclosed <- surveys_df

openclosed <- openclosed %>%
  filter(grepl("rating-democrats", question) | grepl("rating-republicans", question)) %>%
  rename("Subject's opinions on the opposite party"  = "question") %>%
  mutate(across(everything(), ~ gsub('@R@', '', .))) %>%
  mutate(across(everything(), ~ gsub('rating-democrats-post-', '', .))) %>%
  mutate(across(everything(), ~ gsub('rating-republicans-post-', '', .))) %>%
  mutate(across(everything(), ~ gsub('pre-rating-democrats-', '', .))) %>%
  mutate(across(everything(), ~ gsub('pre-rating-republicans-', '', .)))
```

## Reverse code

```{r}
#| label: Reverse code relevant statements to prepare for aggregating scores for quantitative analysis
#| include: false

reverse_coded_scores_df <- surveys_df %>%
   # In the experiment code, we put '@R@' in all statements that are supposed to be reverse coded. So we can grab all of those statements here and reverse them. The only statements that don't have @R@ are the pre-convo survey polarization statements because those were converted into strings for the 
   mutate(answer = ifelse(
         grepl("@R@", question) | 
         grepl("It is not right for family members to request euthanasia on behalf of incapacitated patients", question) | 
         grepl("Euthanasia should be banned for patients with non-terminal conditions", question) |
         grepl("Euthanasia should be banned for all patients", question) |
         grepl("Euthanasia should not be performed at home", question) |
       #  grepl("Gender should be disregarded when selecting candidates for career advancement opportunities", question) |
         grepl("The competitive market should drive healthcare prices", question) |
         grepl("The bombings were justified to bring a swift end to the war", question) |
         grepl("Preventing people without vaccinations from entering public spaces and transportation would do more harm than good", question)  |
         grepl("Businesses and institutions should be barred from discriminating based on vaccination status", question) |
         grepl("It is not right to provide the same federal rights and support for same-sex couples as opposite-sex couples", question),
     7 - as.numeric(answer),
     answer
   )) 

sliders_df <- reverse_coded_scores_df %>%
filter(grepl("slider", question))

#change to be based around 0
reverse_coded_mean_zero_scores_df <- reverse_coded_scores_df %>%
filter(!grepl("slider", question)) %>%
  mutate(answer = recode(as.numeric(answer),
                         `7` = 3,
                         `6` = 2,
                         `5` = 1,
                         `4` = 0,
                         `3` = -1,
                         `2` = -2,
                         `1` = -3,
                         .default = as.numeric(answer)
  ))
```

# Mean scores

```{r}
#| label: Get pre- and post-intervention mean scores for polarization questions (specific and general lumped together)
#| include: false

pre_polarization_df <- reverse_coded_scores_df %>%
  group_by(prolific_subject_id) %>%
  filter(grepl("Euthanasia should be allowed for terminally ill patients who request it", question) |
           grepl("Legal protections should be provided for doctors who perform euthanasia", question) | 
           grepl("It is not right for family members to request euthanasia on behalf of incapacitated patients", question) | 
           grepl("Euthanasia should only be allowed if the patient has received a psychological evaluation", question) |
           grepl("Euthanasia should be banned for patients with non-terminal conditions", question) |
           grepl("Euthanasia should be banned for all patients", question) |
           grepl("Euthanasia should not be performed at home", question) |
           grepl("Gender quotas should be implemented in corporate boards and executive positions", question)  |
         grepl("Mandating equal pay for equal work regardless of gender would improve gender equality", question) |
         grepl("Both mothers and fathers should be provided with parental leave", question) |
         grepl("Free childcare services should be provided to support working parents", question) |
         grepl("Funding for programs aimed at reducing gender-based violence should be increased", question) |
         grepl("Gender diversity should be encouraged in STEM fields through scholarships and grant", question) |
         grepl("Gender should be disregarded when selecting candidates for career advancement opportunities", question) |
           grepl("A universal healthcare system should be implemented in the U.S.", question)  |
         grepl("Medicaid should be expanded to cover more low-income individuals", question) |
         grepl("Prescription drug prices should be regulated to make them more affordable", question) |
         grepl("Government subsidies should be provided for private health insurance", question) |
         grepl("The government should negotiate drug prices with pharmaceutical companies", question) |
         grepl("Government funding should be increased for mental health services", question) |
         grepl("The competitive market should drive healthcare prices", question)
          | grepl("A memorial should be established in the U.S. to honor the victims of the bombings", question)  |
         grepl("The U.S. government should provide financial reparations to the survivors and their families", question) |
         grepl("The bombings were justified to bring a swift end to the war", question) |
         grepl("The bombings were morally wrong", question) |
         grepl("Learning about the atomic bombings of Hiroshima and Nagasaki is essential for understanding the consequences of nuclear warfare", question) |
         grepl("The U.S. should take responsibility for the humanitarian impact of the bombings", question) |
         grepl("The U.S. should participate in international efforts to promote nuclear disarmament and non-proliferation", question) |
           grepl("Preventing people without vaccinations from entering public spaces and transportation would do more harm than good", question)  |
         grepl("Vaccines should be mandated for healthcare workers", question) |
         grepl("Businesses should be allowed to require proof of vaccination for entry", question) |
         grepl("Businesses and institutions should be barred from discriminating based on vaccination status", question) |
         grepl("Schools should be allowed to require vaccinations for attendance", question) |
         grepl("All government-approved vaccines should be mandated", question)   |
           grepl("Implementing comprehensive background checks for all individuals entering the criminal justice system is necessary", question)  |
         grepl("Enhancing mental health support services for incarcerated individuals would be worth the cost and resources", question) |
         grepl("The use of solitary confinement as a punishment should be banned", question) |
         grepl("Inmates should have greater access to educational programs", question) |
         grepl("Non-violent offenders should be permitted to serve sentences through community service or house arrest", question) |
         grepl("The use of private prisons should be restricted", question) | 
           grepl("Same-sex marriage should remain legalized nationwide", question)  |
         grepl("Adoption rights should be granted to married same-sex couples", question) |
         grepl("Employment non-discrimination protections should be provided for gay and lesbian individuals", question) |
         grepl("Same-sex couples should receive spousal benefits (e.g. health insurance; survivor benefits)", question) |
         grepl("It is not right to provide the same federal rights and support for same-sex couples as opposite-sex couples", question) |
         grepl("Discrimination against same-sex couples in housing and public accommodations should be banned", question) |
          grepl("polarization-general", question) | 
           #add the healthcare statements because i forgot to add the line for grepl in the pilot experiment code. can remove this when we do full experiment because i fixed the code now 
           grepl("The federal government should ensure that all citizens have access to healthcare", question) | 
           grepl("Government involvement in healthcare would worsen overall public health", question) | 
           grepl("More government regulation in healthcare would lead to better patient outcomes", question) | 
           grepl("Increased government involvement in healthcare could lead to inefficiencies and higher costs", question) 
           ) %>%
  filter(phase == 'pre-convo-survey' | grepl("post-convo", question)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

post_polarization_df <- reverse_coded_scores_df %>%
  group_by(prolific_subject_id) %>%
  filter(grepl("Euthanasia should be allowed for terminally ill patients who request it", question) |
           grepl("Legal protections should be provided for doctors who perform euthanasia", question) | 
           grepl("It is not right for family members to request euthanasia on behalf of incapacitated patients", question) | 
           grepl("Euthanasia should only be allowed if the patient has received a psychological evaluation", question) |
           grepl("Euthanasia should be banned for patients with non-terminal conditions", question) |
           grepl("Euthanasia should be banned for all patients", question) |
           grepl("Euthanasia should not be performed at home", question) |
           grepl("Gender quotas should be implemented in corporate boards and executive positions", question)  |
         grepl("Mandating equal pay for equal work regardless of gender would improve gender equality", question) |
         grepl("Both mothers and fathers should be provided with parental leave", question) |
         grepl("Free childcare services should be provided to support working parents", question) |
         grepl("Funding for programs aimed at reducing gender-based violence should be increased", question) |
         grepl("Gender diversity should be encouraged in STEM fields through scholarships and grant", question) |
         grepl("Gender should be disregarded when selecting candidates for career advancement opportunities", question) |
           grepl("A universal healthcare system should be implemented in the U.S.", question)  |
         grepl("Medicaid should be expanded to cover more low-income individuals", question) |
         grepl("Prescription drug prices should be regulated to make them more affordable", question) |
         grepl("Government subsidies should be provided for private health insurance", question) |
         grepl("The government should negotiate drug prices with pharmaceutical companies", question) |
         grepl("Government funding should be increased for mental health services", question) |
         grepl("The competitive market should drive healthcare prices", question)
          | grepl("A memorial should be established in the U.S. to honor the victims of the bombings", question)  |
         grepl("The U.S. government should provide financial reparations to the survivors and their families", question) |
         grepl("The bombings were justified to bring a swift end to the war", question) |
         grepl("The bombings were morally wrong", question) |
         grepl("Learning about the atomic bombings of Hiroshima and Nagasaki is essential for understanding the consequences of nuclear warfare", question) |
         grepl("The U.S. should take responsibility for the humanitarian impact of the bombings", question) |
         grepl("The U.S. should participate in international efforts to promote nuclear disarmament and non-proliferation", question) |
           grepl("Preventing people without vaccinations from entering public spaces and transportation would do more harm than good", question)  |
         grepl("Vaccines should be mandated for healthcare workers", question) |
         grepl("Businesses should be allowed to require proof of vaccination for entry", question) |
         grepl("Businesses and institutions should be barred from discriminating based on vaccination status", question) |
         grepl("Schools should be allowed to require vaccinations for attendance", question) |
         grepl("All government-approved vaccines should be mandated", question)   |
           grepl("Implementing comprehensive background checks for all individuals entering the criminal justice system is necessary", question)  |
         grepl("Enhancing mental health support services for incarcerated individuals would be worth the cost and resources", question) |
         grepl("The use of solitary confinement as a punishment should be banned", question) |
         grepl("Inmates should have greater access to educational programs", question) |
         grepl("Non-violent offenders should be permitted to serve sentences through community service or house arrest", question) |
         grepl("The use of private prisons should be restricted", question) | 
           grepl("Same-sex marriage should remain legalized nationwide", question)  |
         grepl("Adoption rights should be granted to married same-sex couples", question) |
         grepl("Employment non-discrimination protections should be provided for gay and lesbian individuals", question) |
         grepl("Same-sex couples should receive spousal benefits (e.g. health insurance; survivor benefits)", question) |
         grepl("It is not right to provide the same federal rights and support for same-sex couples as opposite-sex couples", question) |
         grepl("Discrimination against same-sex couples in housing and public accommodations should be banned", question)|
          grepl("polarization-general", question)
           ) %>%
  filter(grepl('post-convo', phase)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )
```

```{r}
#| label: Get pre- and post- intervention mean scores for general polarization questions only
#| include: false

pre_polarization_general_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("polarization-general", question) | 
           #add the healthcare statements because i forgot to add the line for grepl in the pilot experiment code. can remove this when we do full experiment because i fixed the code now 
           grepl("The federal government should ensure that all citizens have access to healthcare", question) | 
           grepl("Government involvement in healthcare would worsen overall public health", question) | 
           grepl("More government regulation in healthcare would lead to better patient outcomes", question) | 
           grepl("Increased government involvement in healthcare could lead to inefficiencies and higher costs", question) 
           )%>%
  filter(phase == 'pre-convo-survey') %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

post_polarization_general_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("polarization-general", question)) %>%
  filter(grepl("post-convo", phase)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

```

```{r}
#| label: Get pre- and post-intervention mean scores for specific polarization questions only
#| include: false

pre_specific_polarization_df <- reverse_coded_scores_df %>%
  group_by(prolific_subject_id) %>%
  filter(grepl("Euthanasia should be allowed for terminally ill patients who request it", question) |
           grepl("Legal protections should be provided for doctors who perform euthanasia", question) | 
           grepl("It is not right for family members to request euthanasia on behalf of incapacitated patients", question) | 
           grepl("Euthanasia should only be allowed if the patient has received a psychological evaluation", question) |
           grepl("Euthanasia should be banned for patients with non-terminal conditions", question) |
           grepl("Euthanasia should be banned for all patients", question) |
           grepl("Euthanasia should not be performed at home", question) |
           grepl("Gender quotas should be implemented in corporate boards and executive positions", question)  |
         grepl("Mandating equal pay for equal work regardless of gender would improve gender equality", question) |
         grepl("Both mothers and fathers should be provided with parental leave", question) |
         grepl("Free childcare services should be provided to support working parents", question) |
         grepl("Funding for programs aimed at reducing gender-based violence should be increased", question) |
         grepl("Gender diversity should be encouraged in STEM fields through scholarships and grant", question) |
         grepl("Gender should be disregarded when selecting candidates for career advancement opportunities", question) |
           grepl("A universal healthcare system should be implemented in the U.S.", question)  |
         grepl("Medicaid should be expanded to cover more low-income individuals", question) |
         grepl("Prescription drug prices should be regulated to make them more affordable", question) |
         grepl("Government subsidies should be provided for private health insurance", question) |
         grepl("The government should negotiate drug prices with pharmaceutical companies", question) |
         grepl("Government funding should be increased for mental health services", question) |
         grepl("The competitive market should drive healthcare prices", question)
          | grepl("A memorial should be established in the U.S. to honor the victims of the bombings", question)  |
         grepl("The U.S. government should provide financial reparations to the survivors and their families", question) |
         grepl("The bombings were justified to bring a swift end to the war", question) |
         grepl("The bombings were morally wrong", question) |
         grepl("Learning about the atomic bombings of Hiroshima and Nagasaki is essential for understanding the consequences of nuclear warfare", question) |
         grepl("The U.S. should take responsibility for the humanitarian impact of the bombings", question) |
         grepl("The U.S. should participate in international efforts to promote nuclear disarmament and non-proliferation", question) |
           grepl("Preventing people without vaccinations from entering public spaces and transportation would do more harm than good", question)  |
         grepl("Vaccines should be mandated for healthcare workers", question) |
         grepl("Businesses should be allowed to require proof of vaccination for entry", question) |
         grepl("Businesses and institutions should be barred from discriminating based on vaccination status", question) |
         grepl("Schools should be allowed to require vaccinations for attendance", question) |
         grepl("All government-approved vaccines should be mandated", question)   |
           grepl("Implementing comprehensive background checks for all individuals entering the criminal justice system is necessary", question)  |
         grepl("Enhancing mental health support services for incarcerated individuals would be worth the cost and resources", question) |
         grepl("The use of solitary confinement as a punishment should be banned", question) |
         grepl("Inmates should have greater access to educational programs", question) |
         grepl("Non-violent offenders should be permitted to serve sentences through community service or house arrest", question) |
         grepl("The use of private prisons should be restricted", question) | 
           grepl("Same-sex marriage should remain legalized nationwide", question)  |
         grepl("Adoption rights should be granted to married same-sex couples", question) |
         grepl("Employment non-discrimination protections should be provided for gay and lesbian individuals", question) |
         grepl("Same-sex couples should receive spousal benefits (e.g. health insurance; survivor benefits)", question) |
         grepl("It is not right to provide the same federal rights and support for same-sex couples as opposite-sex couples", question) |
         grepl("Discrimination against same-sex couples in housing and public accommodations should be banned", question)
           ) %>%
  filter(phase == 'pre-convo-survey') %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )


post_specific_polarization_df <- reverse_coded_scores_df %>%
  group_by(prolific_subject_id) %>%
  filter(grepl("Euthanasia should be allowed for terminally ill patients who request it", question) |
           grepl("Legal protections should be provided for doctors who perform euthanasia", question) | 
           grepl("It is not right for family members to request euthanasia on behalf of incapacitated patients", question) | 
           grepl("Euthanasia should only be allowed if the patient has received a psychological evaluation", question) |
           grepl("Euthanasia should be banned for patients with non-terminal conditions", question) |
           grepl("Euthanasia should be banned for all patients", question) |
           grepl("Euthanasia should not be performed at home", question) |
           grepl("Gender quotas should be implemented in corporate boards and executive positions", question)  |
         grepl("Mandating equal pay for equal work regardless of gender would improve gender equality", question) |
         grepl("Both mothers and fathers should be provided with parental leave", question) |
         grepl("Free childcare services should be provided to support working parents", question) |
         grepl("Funding for programs aimed at reducing gender-based violence should be increased", question) |
         grepl("Gender diversity should be encouraged in STEM fields through scholarships and grant", question) |
         grepl("Gender should be disregarded when selecting candidates for career advancement opportunities", question) |
           grepl("A universal healthcare system should be implemented in the U.S.", question)  |
         grepl("Medicaid should be expanded to cover more low-income individuals", question) |
         grepl("Prescription drug prices should be regulated to make them more affordable", question) |
         grepl("Government subsidies should be provided for private health insurance", question) |
         grepl("The government should negotiate drug prices with pharmaceutical companies", question) |
         grepl("Government funding should be increased for mental health services", question) |
         grepl("The competitive market should drive healthcare prices", question)
          | grepl("A memorial should be established in the U.S. to honor the victims of the bombings", question)  |
         grepl("The U.S. government should provide financial reparations to the survivors and their families", question) |
         grepl("The bombings were justified to bring a swift end to the war", question) |
         grepl("The bombings were morally wrong", question) |
         grepl("Learning about the atomic bombings of Hiroshima and Nagasaki is essential for understanding the consequences of nuclear warfare", question) |
         grepl("The U.S. should take responsibility for the humanitarian impact of the bombings", question) |
         grepl("The U.S. should participate in international efforts to promote nuclear disarmament and non-proliferation", question) |
           grepl("Preventing people without vaccinations from entering public spaces and transportation would do more harm than good", question)  |
         grepl("Vaccines should be mandated for healthcare workers", question) |
         grepl("Businesses should be allowed to require proof of vaccination for entry", question) |
         grepl("Businesses and institutions should be barred from discriminating based on vaccination status", question) |
         grepl("Schools should be allowed to require vaccinations for attendance", question) |
         grepl("All government-approved vaccines should be mandated", question)   |
           grepl("Implementing comprehensive background checks for all individuals entering the criminal justice system is necessary", question)  |
         grepl("Enhancing mental health support services for incarcerated individuals would be worth the cost and resources", question) |
         grepl("The use of solitary confinement as a punishment should be banned", question) |
         grepl("Inmates should have greater access to educational programs", question) |
         grepl("Non-violent offenders should be permitted to serve sentences through community service or house arrest", question) |
         grepl("The use of private prisons should be restricted", question) | 
           grepl("Same-sex marriage should remain legalized nationwide", question)  |
         grepl("Adoption rights should be granted to married same-sex couples", question) |
         grepl("Employment non-discrimination protections should be provided for gay and lesbian individuals", question) |
         grepl("Same-sex couples should receive spousal benefits (e.g. health insurance; survivor benefits)", question) |
         grepl("It is not right to provide the same federal rights and support for same-sex couples as opposite-sex couples", question) |
         grepl("Discrimination against same-sex couples in housing and public accommodations should be banned", question)
           ) %>%
  filter(grepl('post-convo', phase)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )
```

```{r}
#| label:  Get pre- and post- intervention mean scores for willingness offending reason questions
#| include: false

pre_openmindedness_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("openmindedness", question)) %>%
  filter(grepl('pre-convo-survey', phase)) %>%
  group_by(prolific_subject_id) %>%
  filter(condition != 'control free reflection') %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )


post_openmindedness_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("openmindedness", question)) %>%
  filter(grepl('post-convo', phase)) %>%
  group_by(prolific_subject_id) %>%
  filter(condition != 'control free reflection') %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

```

```{r}
#| label:  Get pre- and post- intervention mean scores for open-mindedness
#| include: false

pre_openmindedness_df <- reverse_coded_scores_df %>%
  group_by(prolific_subject_id) %>%
  filter(grepl("openmindedness", question)) %>%
  filter(grepl('pre-convo-survey', phase) %>%
  group_by(prolific_subject_id) %>%
  filter(condition != 'control free reflection') %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )



post_openmindedness_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("openmindedness", question)) %>%
  filter(grepl('post-convo', phase)) %>%
  group_by(prolific_subject_id) %>%
  filter(condition != 'control free reflection') %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

```

```{r}
#| label: Get pre- and post- intervention mean scores for slider questions
#| include: false

pre_sliders_df <- sliders_df %>%
   group_by(prolific_subject_id) %>%
  filter(phase == 'pre-convo-survey') %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

post_sliders_df <- sliders_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl('post-convo', phase)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

```

```{r}
#| label: Get pre- and post- intervention mean scores for political party questions
#| include: false

pre_politics_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("pre-rating-republicans", question) | grepl("pre-interacting-with-republicans", question) | grepl("pre-rating-democrats", question) | grepl("pre-interacting-with-democrats", question)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    pre_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

post_politics_df <- reverse_coded_scores_df %>%
   group_by(prolific_subject_id) %>%
  filter(grepl("rating-republicans-post", question) | grepl("interacting-with-republicans-post", question) | grepl("rating-democrats-post", question) | grepl("interacting-with-democrats-post", question)) %>%
  filter(condition != 'control free reflection') %>%
  group_by(prolific_subject_id) %>%
  summarize(
    total_score = sum(as.numeric(answer), na.rm = TRUE),
    post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
    min_score = min(as.numeric(answer), na.rm = TRUE),
    max_score = max(as.numeric(answer), na.rm = TRUE)
  )

```

#T tests

```{r}
#| label: T-tests with all topics lumped together 
#| echo: false

t_test_politics <- t.test(pre_politics_df$pre_mean_score, post_politics_df$post_mean_score, paired = TRUE)

t_test_polarization_general <- t.test(pre_polarization_general_df$pre_mean_score, post_polarization_general_df$post_mean_score, paired = TRUE)

t_test_polarization <- t.test(pre_polarization_general_df$pre_mean_score, post_polarization_general_df$post_mean_score, paired = TRUE)

t_test_sliders <- t.test(pre_sliders_df$pre_mean_score, post_sliders_df$post_mean_score, paired = TRUE)

t_test_offending_reason <- t.test(pre_offending_reason_df$pre_mean_score, post_offending_reason_df$post_mean_score, paired = TRUE)

t_test_openmindedness <- t.test(pre_openmindedness_df$pre_mean_score, post_openmindedness_df$post_mean_score, paired = TRUE)


```

# Graphs

```{r}
#| label: Political party graph
#| echo: false

print(t_test_politics)

merged_politics_df <- merge(pre_politics_df, post_politics_df, by = "prolific_subject_id")

politics_scatterplot <- ggplot(merged_politics_df, aes(x = pre_mean_score, y = post_mean_score)) +
  geom_point() +  # Add points
  geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
  geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
  labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in opinions of the opposite party") +
  theme_bw()

print(politics_scatterplot)

```

```{r}
#| label: General polarization graph
#| echo: false

print(t_test_polarization)

merged_polarization_general_df <- merge(pre_polarization_general_df, post_polarization_general_df, by = "prolific_subject_id")

general_polarization_scatterplot <- ggplot(merged_polarization_general_df, aes(x = pre_mean_score, y = post_mean_score)) +
  geom_point() +  # Add points
  geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
  geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
  labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in general polarization of topic-specific beliefs") +
  theme_bw()

print(general_polarization_scatterplot)

```

```{r}
#| label: Specific polarization graph
#| echo: false

print(t_test_polarization_general)

merged_polarization_df <- merge(pre_polarization_df, post_polarization_df, by = "prolific_subject_id")

polarization_scatterplot <- ggplot(merged_polarization_df, aes(x = pre_mean_score, y = post_mean_score)) +
  geom_point() +  # Add points
  geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
  geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
  labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in polarization of topic-specific beliefs") +
  theme_bw()

print(polarization_scatterplot)

```

```{r}
#| label: Offending reason graph
#| echo: false

print(t_test_offending_reason)

merged_offending_reason_df <- merge(pre_offending_reason_df, post_offending_reason_df, by = "prolific_subject_id")

offending_reason_scatterplot <- ggplot(merged_offending_reason_df, aes(x = pre_mean_score, y = post_mean_score)) +
  geom_point() +  # Add points
  geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
  geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
  labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in how much different concerns affect willingness to converse") +
  theme_bw()

print(offending_reason_scatterplot)

```

```{r}
#| label: Sliders graph
#| echo: false

print(t_test_sliders)

merged_sliders_df <- merge(pre_sliders_df, post_sliders_df, by = "prolific_subject_id")

sliders_scatterplot <- ggplot(merged_sliders_df, aes(x = pre_mean_score, y = post_mean_score)) +
  geom_point() +  # Add points
  geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
  geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
  labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in willingness to converse about selected topic with others") +
  theme_bw()

print(sliders_scatterplot)

```

```{r}
#| label: Openmindedness graph
#| include: false

print(t_test_openmindedness)

merged_openmindedness_df <- merge(pre_openmindedness_df, post_openmindedness_df, by = "prolific_subject_id")

sliders_scatterplot <- ggplot(merged_openmindedness_df, aes(x = pre_mean_score, y = post_mean_score)) +
  geom_point() +  # Add points
  geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality 
  labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in openmindedness score") +
  theme_bw()

print(sliders_scatterplot)

write.csv(merged_openmindedness_df, "opendfone.csv", row.names = FALSE)

```

# Conversation transcripts

```{r}
#| label: Create data frames that are just for the conversation transcripts and free reflections to make them more readable. Remove columns that aren't necessary. Export as csv's
#| echo: false

## make raw conversations df with subject_id and condition. this includes the keypresslog 
conversations_raw_df <- raw_df %>%
  filter(trial_type == "chat") %>%
  select(prolific_subject_id, logs, condition)

# merge with conversations df 
conversations_raw_df <-  conversations_raw_df %>%
  left_join(full_prolific_demographics_df) %>%
  rename("start" = "Started at") %>%
  mutate(round = case_when(
    grepl("2024-07-14", start) ~ "1.1 (Original prompts)",
    grepl("2024-07-17", start) ~ "1.2 (Original prompts)",
    grepl("2024-07-18", start) ~ "1.3 (Original prompts; conservative only)",
    grepl("2024-07-26", start) ~ "1.4 (Modified prompts + combo bot)",
    grepl("2024-08-02", start) ~ "2.1 (Combo, selection, control)",
    TRUE ~ NA_character_
  )) %>%
  select(prolific_subject_id, logs, condition, round)

## make a cleaned df for readability 
conversations_df_no_selection <- conversations_raw_df %>%
  # 
   # remove keypresslog
    mutate(across(everything(), ~ gsub("keyPressLog.*?\\]}", '', .))) %>%
  #remove system content (chatbot single prompts and prompt within the chain prompt)
    mutate(across(everything(), ~ gsub('"role":"system","content".*?\\},', '', .))) %>%
  #remove welcome to chatroom message
    mutate(across(everything(), ~ gsub('"role":"system-prompt","content".*?\\},', '', .))) %>%
  #rename to clarify chatbot's first message. include | so that we can use it as a delimiter later
    mutate(across(everything(), ~ gsub('"role":"chatbot","content"', '|FIRST MESSAGE', .))) %>%
  #rename to clarify user messages
    mutate(across(everything(), ~ gsub('"role":"user","content"', '|USER', .))) %>%
  #rename to clarify bot messages
    mutate(across(everything(), ~ gsub('"role":"assistant","content"', '|BOT', .))) %>%
  #rename to clarify the content that the first bot passes to the second bot in the chain
    mutate(across(everything(), ~ gsub('"role":"chain-prompt"', "|CHAIN PROMPT", .))) %>%
  mutate(across(everything(), ~ gsub('\\}\\],"time"', ',"time"', .))) 

conversations_df_only_selection <- conversations_raw_df %>%
   # remove keypresslog
    mutate(across(everything(), ~ gsub("keyPressLog.*?\\]}", '', .))) %>%
  #remove system content (chatbot single prompts and prompt within the chain prompt)
    mutate(across(everything(), ~ gsub('"role":"system","content".*?\\},', '', .))) %>%
  #remove welcome to chatroom message
    mutate(across(everything(), ~ gsub('"role":"system-prompt","content".*?\\},', '', .))) %>%
  #rename to clarify chatbot's first message. include | so that we can use it as a delimiter later
    mutate(across(everything(), ~ gsub('"role":"chatbot","content"', '|FIRST MESSAGE', .))) %>%
  #rename to clarify user messages
    mutate(across(everything(), ~ gsub('"role":"user","content"', '|USER', .))) %>%
  #rename to clarify bot messages
    mutate(across(everything(), ~ gsub('"role":"assistant","content"', '|BOT', .))) %>%
  #rename to clarify the content that the first bot passes to the second bot in the chain
    mutate(across(everything(), ~ gsub('"role":"chain-prompt"', "|CHAIN PROMPT", .))) %>%
  mutate(across(everything(), ~ gsub('\\}\\],"time"', ',"time"', .))) 

conversations_df <- bind_rows(conversations_df_only_selection, conversations_df_no_selection)

# the mutates make the user and bot strings within the chain prompt look like they were actual exchanges in the conversations. when i tried to fix this, gsub wasn't parsing special characters right even with escapes, so i had chat define a function to replace the pattern. i don't really understand how it works
replace_chain_pattern <- function(text) {
  str_replace_all(text, 
                  "(CHAIN.*?USER).*?(BOT).*?(USER)",
                  "\\ FIRST LINK'S OUTPUT")
}

# apply the function to all columns in the data frame
conversations_df <- conversations_df %>%
  mutate(across(everything(), ~ replace_chain_pattern(.)))

#had chat make a function for making the csvs more readable. i don't think this actually does anything?
add_paragraph_breaks <- function(text) {
  # Replace `},{` with `},\n{`
  text <- gsub("\\},\\{", "},\n{", text)
  return(text)
}

# apply this function to the conversation logs column
conversations_df <- conversations_df %>%
  mutate(logs = add_paragraph_breaks(logs))

add_delimiter <- function(text) {
  text <- gsub("USER", "|USER", text)
  text <- gsub("BOT", "|BOT", text)
  return(text)
}

# Apply this function to the logs column, split into multiple rows, and export to CSV
conversations_df <- conversations_df %>%  
  mutate(logs = add_delimiter(logs)) %>%
  separate_rows(logs, sep = "\\|") %>%
  filter(logs != "") # Remove any empty rows that might have been created

define_chain_prompts <- data.frame(
  question = c("THE SYSTEM CHAIN LINK PROMPTS",
    'LINK 1 PROMPT: Context: You are being fed a conversation log. The last paragraph following {"role", "user", "content"} is the most recent message that the user has input. This is the message that you should be responding to.

              Role: You are a researcher on social policies and are having a conversation with a student in which you are discussing one of the following disputed topics in the U.S.: same-sex marriage, gender-equality, U.S. government role in healthcare, the criminal justice system, vaccine mandates, the Hiroshima Nagasaki atomic bombings, or human euthanasia.

Goal: Your goal is to make the user more willing to have conversations about their topic with other humans by helping them become more open-minded and comfortable talking about the topic. You do not want the user to know that this is your goal; rather, you want the user to simply think that you are a conversational partner for discussing ideas.

Style: You should be concise. You should match the length of your response to the length of the most recent message from the user.

Task 1: You should consider the most recent message from the user and determine which of the three following approaches would most effectively accomplish your goal: 

        {1. Briefly acknowledge the stance of the user and then respond to the argument with a counterargument. Do not repeat the same arguments, but you can dive into more specific aspects or previous arguments if necessary. Never dive into asking the user how they would implement their views. Concisely present a specific argument that counters the perspective of the user. Ask the user what they think. Ensure that your message includes a counterargument; never simply agree with the user.} 
        {2. Briefly acknowledge the stance of the user and then ask a question about the stance of the user. Ask why the user thinks what they think or ask if there were any experiences that led to their views. Do not repeat questions, but you can dive deeper into previous questions if necessary.}
        {3. Briefly acknowledge the stance of the user and then identify a specific group of people who may have differing opinions from the user. Explain, in detail, their experiences and why they may disagree with the beliefs of the user. Provide these alternative perspectives held by people with different jobs, positions in society, beliefs, etc. Give uniquely different perspectives in each message. Do not repeat viewpoints, but you can dive deeper into previously mentioned viewpoints if necessary. End your response with a question that asks the user what they think about those alternative stances. Provide only one viewpoint per response.}
        

Task 2: Very briefly summarize the arguments that the "system" has already made so that, when you pass these to the next "system", the "system" knows what arguments to not repeat.

What you should output: You are passing your output to another "system" that is going to write a response to the user. Thus, you should output your summary of the arguments that have already been made, the most recent message from the user, and the approach that you selected. Ensure that you output the entirety of the approach, not just its number, so that the next bot knows what to do.',
  "LINK 2 PROMPT (link 1's output is appended to this): ",
  "CONVERSATIONS"
  ),
  stringsAsFactors = FALSE
)

#merge them 
bot_feedback <- bind_rows(define_bot_feedback_questions, bot_feedback)

# Export the modified data frame to CSV
write.csv(conversations_df, "conversation_transcripts_spaced.csv", row.names = FALSE)

#write raw convo df to compare with if there are bugs in refined dfs
write.csv(conversations_raw_df, "RAW_conversation_transcripts.csv", row.names = FALSE)

```

# Reflections df

```{r}
#| label: Reflections df and csv
#| include: false

reflections_df <- raw_df %>%
  filter(phase == "control-intervention")%>%
  select(prolific_subject_id, response, time_elapsed, phase, condition) %>%
  mutate(`Time spent on reflection (minutes)` = as.numeric(`time_elapsed`) / 60000) %>%
select(- "time_elapsed")

#write df
write.csv(reflections_df, "reflection_transcripts.csv", row.names = FALSE)
```

# Feedback "last questions" data

```{r}
#| label: Wrangling feedback data for readability. Make csv
#| include: false

# make demographics df with just the 16 subs that are good for data analysis. need demo data so we can define the round that the people were in (so we know whether they chatted with an older bot)

good_data_prolific_demographics_df <- bind_rows(demo1, demo2, demo4) 
good_data_prolific_demographics_df <- good_data_prolific_demographics_df %>%
rename("prolific_subject_id" = "Participant id") %>%
filter(Status != "RETURNED") %>%
mutate(`Time taken (minutes)` = as.numeric(`Time taken`) / 60) %>%
select(- "Time taken")

# make df
bot_feedback <- surveys_df %>%
  left_join(good_data_prolific_demographics_df) %>%
  rename("start" = "Started at") %>%
  filter(!any(condition == "control free reflection")) %>%
  mutate("round_of_pilot" = case_when(
    grepl("2024-07-14", start) ~ "Round 1 (Original prompts)",
    grepl("2024-07-17", start) ~ "Round 2 (Original prompts)",
    grepl("2024-07-18", start) ~ "Round 3 (Original prompts; conservative only)",
    grepl("2024-07-26", start) ~ "Round 4 (Modified prompts + combo bot)",
    TRUE ~ NA_character_
  )) %>%
  mutate(question = ifelse(str_detect(question, "free-response"), "free-response", question)) %>%
    mutate(question = ifelse(str_detect(question, "convo-effect-on-willingness"), "convo-effect-on-willingness", question)) %>%
    mutate(question = ifelse(str_detect(question, "new-perspective"), "new-perspective", question)) %>%
    mutate(question = ifelse(str_detect(question, "still-contributes"), "still-contributes", question)) %>%
    mutate(question = ifelse(str_detect(question, "feelings-about-bot"), "feelings-about-bot", question)) %>%
  filter(question == "free-response" | question == "convo-effect-on-willingness" | question == "new-perspective" | question == "still-contributes" | question == "feelings-about-bot" | question == "topicChoice") %>%
  arrange(desc(prolific_subject_id)) %>%
  select(prolific_subject_id, question, answer, condition, round_of_pilot)

# add some entries that explain what the questions were 
define_bot_feedback_questions <- data.frame(
  question = c("THE FULL QUESTIONS",
    "free-response: After your conversation with the chat bot, do you feel more willing to have a conversation with others about ${topicChoiceAsString}? Please freely reflect in the space below.",
  "convo-effect-on-willingness: What parts of this conversation, if any, affected your willingness to talk with someone who has different views about ${topicChoiceAsString}? What made you feel like the conversation was or was not productive?", 
  "new-perspective: Throughout this conversation, were there any moments that opened you up to a new perspective about ${topicChoiceAsString}? If so, what occurred in these moments? If not, what made you feel like the conversation was not productive?", 
  "still-contributes: What still contributes to your willingness or unwillingness to converse with others about ${topicChoiceAsString}? Please freely reflect in the space below.", 
  "feelings-about-bot: We are still working on improving our chatbot. How did you like talking with the bot? What do you wish were different? Please provide any feedback regarding your conversation that we have not already covered.",
  "DATA"
  ),
  stringsAsFactors = FALSE
)

#merge them 
bot_feedback <- bind_rows(define_bot_feedback_questions, bot_feedback)

write.csv(bot_feedback, "bot_feedback.csv", row.names = FALSE)

```

# Keypress log check

```{r}
#| label: Created automated process for flagging transcripts that might have been pasted in
#| include: false

keypress_flagging <- conversations_raw_df %>%
  separate_rows(logs, sep = 'keyPressLog') %>%
  mutate()
  filter(!grepl('^\\[\\{"role":"system","content":', logs)) %>%
   mutate(logs = gsub('"role":"assistant","content".*', '', logs)) %>%
  filter(grepl('"Command","v"', logs) | 

#search for ctrl v or cmnd v 
#also look at number of individual key presses and number of characters in responses. anytime response is longer than keypresses 



#make it cleae that we want a stram of thoughts more than a clear explanation 
```

# Tables for html

## Example attitude change table

```{r}
#| label: Make an example table of changes
#| echo: false

processing_example_table_of_changes <- surveys_df

processing_example_table_of_changes <- processing_example_table_of_changes %>%
  filter(prolific_subject_id == "662c7cce4d3e84ac2f284706") %>%
  filter(grepl("rating-democrats", question)) %>%
  rename("Subject's opinions on the opposite party"  = "question") %>%
  mutate(across(everything(), ~ gsub('@R@', '', .))) %>%
  mutate(across(everything(), ~ gsub('rating-democrats-post-', '', .))) %>%
  mutate(across(everything(), ~ gsub('pre-rating-democrats-', '', .))) 

part1_processing_example_table_of_changes <-processing_example_table_of_changes[1:6, ]
part2_processing_example_table_of_changes <-processing_example_table_of_changes[7:12, ]

example_table_of_changes <- part1_processing_example_table_of_changes %>%
  left_join(part2_processing_example_table_of_changes, by = "Subject's opinions on the opposite party", suffix = c("", "_new")) %>%
    rename("Pre-Convo Ratings" = answer, "Post-Convo Ratings" =  answer_new) %>%
  select("Subject's opinions on the opposite party", "Pre-Convo Ratings", "Post-Convo Ratings")


print(example_table_of_changes)

```

## Demographics table

```{r}
#| label: Create table of basic demographics. The current code is just a rough idea with commented out examples from an old project
#| echo: false

#we already read in demographics earlier 

#create a demographics table from the demographics questions in our survey. turn the demographics questions from question column into their own columns with answer as the entries within the column
survey_demographics_df <- surveys_df %>%
filter(question == 'ethnicity' | question == 'political-affiliation' | question == 'gender-identification' | question == 'education-level' | question == 'religious-affiliation' | question == 'political-ideology') %>%
select(question, answer, prolific_subject_id, condition) %>%
pivot_wider(names_from = question, values_from = answer)

#merge our two demographics tables
sixteen_sub_all_demographics_df <- full_prolific_demographics_df %>%
  filter(pilot_round != 1) %>%
  left_join(survey_demographics_df, by = "prolific_subject_id", suffix = c("_prolific", ""))

#make a region column because graphic each state is excessive
sixteen_demographics_df$Region <- ifelse(sixteen_demographics_df$`Current u.s state of residence` %in% c("California (CA)", "Colorado (CO)", "Utah (UT)", "Utah(UT)", "Idaho (ID)", "Alaska (AK)", "Hawaii (HI)", "Washington (WA)", "Oregon (OR)", "Nevada (NV)", "New Mexico (NM)", "Montana (MT)", "Arizona (AZ)", "Wyoming (WY)"), "West",
                     ifelse(sixteen_demographics_df$`Current u.s state of residence` %in% c("Texas (TX)", "Florida (FL)", "Georgia (GA)", "North Carolina (NC)", "Tennessee (TN)", "South Carolina (SC)", "Alabama (AL)", "Mississippi (MS)", "Louisiana (LA)", "Delaware (DE)", "Maryland (MD)", "Virginia (VA)", "Washington, D.C. (DC)", "West Virginia (WV)", "Kentucky (KY)", "Arkansas (AR)", "Oklahoma (OK)"), "South",
                            ifelse(sixteen_demographics_df$`Current u.s state of residence` %in% c("New York (NY)", "New Jersey (NJ)", "Massachusetts (MA)", "Pennsylvania (PA)", "Connecticut (CT)", "Rhode Island (RI)", "Vermont (VT)", "New Hampshire (NH)", "Maine (ME)"), "Northeast",
                                   ifelse(sixteen_demographics_df$`Current u.s state of residence` %in% c("Michigan (MI)", "Illinois (IL)", "Ohio (OH)", "Indiana (IN)", "Wisconsin (WI)", "Minnesota (MN)", "Iowa (IA)", "Missouri (MO)", "Kansas (KS)", "Nebraska (NE)", "South Dakota (SD)", "North Dakota (ND)"), "Midwest", NA))))


# define the levels in categorical variables so that they are organized in the table 
sixteen_demographics_df$'political-affiliation' <- fct_relevel(
  sixteen_demographics_df$'political-affiliation',
  "Republican",
  "Democrat",
  "Independent"
)

sixteen_demographics_df$'education-level' <- fct_relevel(
  sixteen_demographics_df$'education-level',
  "High school diploma or GED",
   "Some college; no degree",
  "Associate degree",
  "Bachelor's degree",
   "Master's degree",
)


sixteen_demographics_df$'political-ideology' <- fct_relevel(
  sixteen_demographics_df$'political-ideology',
"Very conservative",
"Conservative",
"Somewhat conservative",
"Moderate",
"Somewhat liberal",
"Liberal",
"Very liberal"
)


demographics_table <- tbl_summary(sixteen_demographics_df,
 by = NULL,
  label = list(
    `Time taken (minutes)` = "Time taken (minutes)",
    `Region` = "Current U.S. region of residence",
    Age = "Age (years)",
    Sex = "Sex",
    `Ethnicity simplified` = "Ethnicity simplified",
    `political-affiliation` = "Political affiliation",
    `education-level` = "Education level",
    `religious-affiliation` = "Religious affiliation",
    `political-ideology` = "Political ideology"
  ),
  statistic = NULL,
#list(
  #  all_continuous() ~ "{mean} ({sd})",
  #  all_categorical() ~ "{n} ({p}%)"
#),
  type = list(
    `Time taken (minutes)` = "continuous",
    `Region` = "categorical",
    `Age` = "continuous",
    `gender-identification` = "categorical",
   `Sex` = "categorical",
    `Ethnicity simplified` = "categorical",
    `political-affiliation` = "categorical",
    `education-level` = "categorical",
    `religious-affiliation` = "categorical",
    `political-ideology` = "categorical"
  ),
  digits = list(
    all_continuous() ~ 2,
    all_categorical() ~ 0
  ),
  value = NULL,
  missing = NULL,
  missing_text = NULL,
  sort = NULL,
  percent = NULL,
 include = c(
'Time taken (minutes)', 
'Region', 
'Age', 
'Sex', 
'Ethnicity simplified', 
'political-affiliation', 
'education-level', 
'religious-affiliation', 
'political-ideology'
))
 # %>%  modify_header(label = "**Predictor Variable**")

# Print the table
as_gt(demographics_table)

```
